const Jade = require('jade');
const Path = require('path');
const assert = require('assert');
const Convert = require('koa-convert');
(function() {
  'use strict';

  let jade,
    options = {},
    _ = require('lodash'),
    path = Path.normalize(Path.join(process.cwd(), '/views'));

  /** 'filterPath' appends a forward slash if it does exist.
   * @private
   * @api private  
   */
  function filterPath(str) {
    if (str) str = str.slice(-1) === '/' ? str : str + '/';
    return str;
  }

  /**
   * 'jade' is the main function middleware
   * @public
   * @param  {String, Object} obj The path to the views or the global options
   * @return {Function}    The middleware function for koa
   */
  jade = function(obj, fn) {

    //set global options
    _.merge(options, _.isPlainObject(obj) ? obj || {} : {});
    //set path
    options.path = _.has(options, 'path') ? filterPath(Path.normalize(options.path)) : _.isString(obj) ? filterPath(Path.normalize(obj)) : filterPath(path);
    //check if obj || fn is a function
    fn = _.isFunction(obj) ? obj : _.isFunction(fn) ? fn : null;

    /** 'render' is the function that renders the jade file.
     * @public
     * @param {String} view The view to render
     * @param {Object} opt The options for the view to render
     * @param {Object} locals The locals for the view to render
     */
    const render = fn || function(view, opt, locals) {
        let path = (options.path ? options.path : '') + (/\.jade$/.test(view) ? view : view + '.jade');
        opt = _.merge(opt || {}, _.merge(locals || {}, this.state))
        this.body = Jade.renderFile(path, opt);
        this.type = options.type ? options.type : 'text/html';
      };

    const legacy = function*(next) {
      if (!this.jade) {
        //pass jade to the ctx
        this.jade = Jade;
        //pass the options to jade
        this.jade.options = options;
      }
      //bind the render function with ctx
      this.render = render.bind(this);
      yield next;
    };

    const modern = function(self, next) {
      if (!self.jade) {
        //pass jade to the ctx
        self.jade = Jade;
        //pass the options to jade
        self.jade.options = options;
      }
      self.render = render.bind(self);
      return next();
    }

    return Convert.compose(legacy, modern);

  };
  /**
   * 'compile' is Jade's original compile function
   * @public
   */
  jade.compile = Jade.compile;
  /**
   * 'render' is Jade's original render function
   * @public
   */
  jade.render = Jade.render;

  /**
   * 'renderFile' is Jade's original renderFile function
   * @public
   */
  jade.renderFile = Jade.renderfile;

  module.exports = jade;
}).call(this);