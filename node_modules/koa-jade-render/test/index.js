var jade = require('../index');
var path = require('path');
var assert = require('chai').assert;
var jsdom = require('jsdom');
var supertest = require('supertest');
var path = require('path');
var convert = require('koa-convert');

describe('koa-jade-render', function() {
  describe('defaults', function() {
    var Koa = require('koa');
    var app = new Koa();
    app.use(jade(path.join(__dirname)));

    app.use((self, next) => {
      return next().then(() => {
        self.render('index', {
          greet: function() {
            return 'Hello World!'
          }
        });
      });
    });
    app.listen(3000);
    it('should add jade to ctx', function() {
      app.use(convert(function*(next) {
        assert.isObject(this.jade);
        assert.isObject(this.jade.options);
        assert.isFunction(this.jade.compile);
        yield next;
      }));
    });
    it('should render index.jade', function() {

      jsdom.env({
        url: "http://localhost:3000",
        scripts: ["http://code.jquery.com/jquery.js"],
        done: function(errors, window) {
          var $ = window.$;
          var result = $("title").text();
          assert.isString(result);
          assert.strictEqual(result, 'koa-jade-render');
        }
      });
    });
    it('should output a greeting using locals by calling greet()', function() {

      jsdom.env({
        url: "http://localhost:3000",
        scripts: ["http://code.jquery.com/jquery.js"],
        done: function(errors, window) {
          var $ = window.$;
          var result = $("#greet").text();
          assert.isString(result);
          assert.strictEqual(result, 'Hello World!');
        }
      });
    });
  });

  describe('override the renderer', function() {
    var Koa = require('koa');
    var app = new Koa();
    app.use(convert(jade(path.normalize(__dirname + '/'), function*() {
      this.body = {
        data: 'Hello World!'
      };
    })));
    app.use(convert(function*() {
      yield this.render();
    }));

    it('should return Hello World!', function(done) {
      supertest(app.listen()).get('/').end(function(err, res) {
        assert.isDefined(res.body.data);
        assert.strictEqual(res.body.data, 'Hello World!');
        done();
      })
    });
  });
});